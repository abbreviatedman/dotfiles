#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

* Colin Jaffe's Literate Config
Increasing my efficiency as inefficiently as possible.

** Introduction

Emacs is a text editor. Well, most people use it predominantly as a text editor, but at its nerdy awkward heart it's actually a Lisp programming environment. Setting Emacs' preferences and extending it with third-party code is all done through Lisp code that the Emacs user writes.

This is my code so far.

[[https://www.explainxkcd.com/wiki/index.php/297:_Lisp_Cycles][https://www.explainxkcd.com/wiki/images/e/eb/lisp_cycles.png]]

I've been using a popular third-party config (and config system) called Doom Emacs for a long time now, but it's grown /rather/ creaky, between their code, my code, and Emacs' code. I don't know what's going on an unfortunate amount of the time because of this three-way scrum. So I'm declaring configuration bankruptcy and starting over. (Though I'm not ready for this to be my main config yet. Still dooming it up for /work/ work until I can get this version up to speed.)

I'm basing this new config on Crafted Emacs for now, which is a more sparse system. Eventually I'll cut that out too.

The big task is going to be going through Doom's vast built-in modules, taking the code I want. Doom's modules are so well done and (usually) intuitive that I miss a lot of their quality-of-life improvements. A good example of this is their elegant intermixing of Vim and vanilla Emacs keybindings. I don't have that in this config yet, and I truly feel the absence. But a massive massive amount of work has gone into their modules, and it's going to take a long while to untangle it all and build up my own config.

So that's where we started and where we're going. Let's look at some code!


**  Literate Config Setup
Literate programming is an approach where, instead of putting comments in code to explain things, we put code in the middle of prose. The document you're reading right now is an example of literate programming, often called a literate config when it's about configuring apps. All of the code blocks in this document are "tangled", which means that they are copied from the document to a code file. This code file is rarely edited directly—instead, I make sure that any code in here is documented, that there's a /reason/ it exists. The documentation can't fall behind the code—the documentation /is/ the code.

You can read more on this subject... and I'll probably write more. But in the meantime: the function below simply ensures that any time this document is saved, it is automatically tangled to its matching code file. It's pretty sweet!

#+begin_src emacs-lisp
(defun crafted--org-babel-tangle-config ()
"Tangle code blocks from our config.org file on save.

A nice little helper from Crafted Emacs.

Thanks, Crafted!"
  (when (string-equal (buffer-file-name)
                      (expand-file-name "config.org" crafted-config-path))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'crafted--org-babel-tangle-config)))
#+end_src

** Crafted Modules

These modules are from Crafted Emacs, and are being pulled in from another directory (you can see them in the Crafted Emacs repository on GitHub). I'm currently going one-by-one through them and deciding what to keep and what to lose.

#+begin_src emacs-lisp
  (require 'crafted-defaults)    ; Sensible default settings for Emacs
  (require 'crafted-ide)
  (require 'crafted-updates)     ; Tools to upgrade Crafted Emacs
  (require 'crafted-completion)  ; selection framework based on `vertico`
  (require 'crafted-windows)     ; Window management configuration
  (require 'crafted-editing)     ; Whitspace trimming, auto parens etc.
  (require 'crafted-evil)        ; An `evil-mode` configuration
  (require 'crafted-org)         ; org-appear, clickable hyperlinks etc.
  (require 'crafted-project)     ; built-in alternative to projectile
  (require 'crafted-screencast)  ; show current command and binding in modeline
  (require 'crafted-compile)     ; automatically compile some emacs lisp files
#+end_src


** Packages

There are many different package systems for Emacs. Let's try to navigate them.

*** Setting Crafted To Use Straight

Many prefer the =straight= package system to Emacs' built-in package system (called simply =package=) because of its reproducibility and use of Git. I'm gonna give it a try!

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(setq crafted-package-system 'straight)
(crafted-package-bootstrap crafted-package-system)
#+end_src

*** Adding Use-Package
=use-package= is a fantastic way to keep your configurations tidy and organized. I'm used to using it with Doom, but I discovered it later, so lots of the old config were littered here and there haphazardly, and I'd like most if not all of this config to be well-organized, so we'll use =use-package= from the start.

That said, writing my config in a literate document like this one gives me headings and a hierarchy that adds its own layer of organization, in large part achieving the same result that =use-package= does.

But since you can't have enough organization...

[[https://media.giphy.com/media/3o85xIO33l7RlmLR4I/giphy.gif]]

So let's install =use-package= too!

First step: use =straight= to install =use-package=.

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

The second and quite confusing step is to use =use-package= to configure =straight= to use =use-package= to know what packages to install.

(Yes, this is a weird Ouroboros situation. Don't think about it too hard.)

#+begin_src emacs-lisp
(use-package straight
  :custom
  (straight-use-package-by-default t))
#+end_src

And between those two, we've got a fantastic system where--as you see below with =pulsar=--we can just add a =use-package= block and set the configuration variables for a package, and =straight= will install it the first time the block is run.

Pretty sweet.

** General UI

Not a lot here yet, but there will be!

*** Keypress Transparency

It's nice to know what you're pressing!

#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode))
#+end_src

*** Scrolling Around
When you jump around as fast as you can in Emacs, it's nice to get a quick visual reminder of where the cursor is now.

There are many packages that do this (including a built-in one), but Prot's =pulsar= is my favorite.

Not a huge necessity— the only reason I added pulsar early is to confirm the =use-package=/=straight= combo was working.

#+begin_src emacs-lisp
(use-package pulsar
  :init
  (setq pulsar-pulse t)
  (setq pulsar-delay .01)
  (setq pulsar-iterations 30)
  (setq pulsar-face 'pulsar-generic)
  :config
  (setq crj--far-jumping-functions '(evil-scroll-up
                                     evil-scroll-down
                                     evil-goto-line
                                     evil-beginend-prog-mode-goto-beginning
                                     evil-beginend-prog-mode-goto-end
                                     evil-beginend-org-mode-goto-beginning
                                     evil-beginend-org-mode-goto-end
                                     evil-beginend-dired-mode-goto-beginning
                                     evil-beginend-dired-mode-goto-end
                                     evil-beginend-message-mode-goto-beginning
                                     evil-beginend-message-mode-goto-end
                                     evil-beginend-org-agenda-mode-goto-beginning
                                     evil-beginend-org-agenda-mode-goto-end
                                     evil-beginend-compilation-mode-goto-beginning
                                     evil-beginend-compilation-mode-goto-end
                                     evil-beginend-magit-status-mode-goto-beginning
                                     evil-beginend-magit-status-mode-goto-end
                                     evil-beginend-magit-revision-mode-goto-beginning
                                     evil-beginend-magit-revision-mode-goto-end
                                     evil-goto-first-line
                                     evil-goto-mark-line
                                     evil-scroll-page-up
                                     evil-scroll-page-down
                                     bury-buffer
                                     kill-buffer
                                     doom/window-enlargen
                                     crj--toggle-presentation-mode
                                     doom
                                     delete-other-windows
                                     winner-undo
                                     evil-window-up
                                     evil-window-down
                                     evil-window-left
                                     evil-window-right
                                     evil-window-new
                                     evil-window-vnew))

  (dolist (function crj--far-jumping-functions)
    (add-to-list 'pulsar-pulse-functions function))

  (pulsar-global-mode 1))
#+end_src

*** Line Numbers
**** Basic Line Number Settings

Crafted Emacs has some nice custom functions for handling modes you've decided should have line numbers and those that don't.

But I really like line numbers /everywhere/, so I'll be ignoring all of that!

#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Display relative line nubers everywhere.
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative
        display-line-numbers-width-start t
        ;; I even want line numbers in Magit.
        magit-disable-line-numbers nil
        magit-section-disable-line-numbers nil))
#+end_src

A nice little line number switcher, made possible by the utility function I'll probably be using a lot.
#+begin_src emacs-lisp
(defun crj--cycle-line-numbers ()
  "Toggle line number display style in the current buffer

Toggles the style between relative numbers, absolute numbers, and no numbers at all."
  (interactive)
  (crj--cycle-setting 'display-line-numbers '(relative t nil)))
#+end_src

**** Use Monospace Font For Line Numbers
Switching the line number font to monospace (or "fixed pitch") is necessary when your main font is variable pitch.

So this is a solution to a rather niche problem, but I really like using a made-for-coding-but-variable-pitch font, so I needed to figure this one out.

#+begin_src emacs-lisp
(setq crj--ui-fixed-pitch-font "Hack")

(use-package emacs
  :init
  (setq crj--line-number-faces '(line-number
                                line-number-current-line
                                line-number-major-tick
                                line-number-minor-tick))

  (defun crj--make-line-number-face-monospace (&rest args)
    (interactive)
    (dolist (face crj--line-number-faces)
        (set-face-attribute face nil :family crj--ui-fixed-pitch-font))
    args)

  (add-hook 'emacs-startup-hook #'crj--make-line-number-face-monospace))
#+end_src

** Text Editing

*** General Settings

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (global-visual-line-mode 1))
#+end_src

*** Evil

Evil (Emacs VI Layer) is a package for getting Vim keybindings in Emacs. I hesitate to say "Vim emulation", because in many ways, it is MORE Vim than Vim itself. This is an argument to make another time, but an argument I'm willing to make in the right space.

#+begin_src emacs-lisp
  (use-package evil
    :custom
    (evil-want-C-i-jump t)
    (evil-want-Y-yank-to-eol t)
    (evil-want-fine-undo t)
    (evil-respect-visual-line-mode nil))
#+end_src

** Look And Feel

*** Font settings

Set the default face. The default face is the basis for most other faces used in Emacs. A "face" is a configuration including font, font size, foreground and background colors and other attributes.  The fixed-pitch and fixed-pitch-serif faces are monospace faces generally used as the default face for code. The variable-pitch face is used when `variable-pitch-mode' is turned on, generally whenever a non-monospace face is preferred.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun crj--set-fonts ()
   (custom-set-faces
               `(default ((t (:font "Input 14"))))
               `(fixed-pitch ((t (:inherit (default)))))
               `(fixed-pitch-serif ((t (:inherit (default)))))
               `(variable-pitch ((t (:font "IBM Plex Serif 14"))))))
  (add-hook 'emacs-startup-hook #'crj--set-fonts))
#+end_src

*** Theme settings

Themes are color customization packages which coordinate the various colors, and in some cases, font-sizes for various aspects of text editing within Emacs, toolbars, tab-bars and modeline. Several themes are built-in to Emacs, by default, Crafted Emacs uses the `deeper-blue' theme. Here is an example of loading a different theme from the venerable Doom Emacs project.


#+begin_src emacs-lisp
  (progn
    (disable-theme 'deeper-blue)          ; first turn off the built-in Crafted Emacs deeper-blue theme
    (load-theme 'modus-operandi t))       ; load the doom-palenight theme
#+end_src

** Utility Functions
Making my life easier!

#+begin_src emacs-lisp
(defun crj--cycle-setting (setting potential-values)
  "Cycle SETTING through POTENTIAL-VALUES.

SETTING is a quoted symbol.

POTENTIAL-VALUES is a list of values to cycle through."
  (let ((i (cl-position (eval setting) potential-values)))
    (set setting (if (eq (1+ i) (length potential-values))
                     (car potential-values)
                   (nth (1+ i) potential-values)))))
#+end_src
